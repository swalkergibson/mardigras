<?php

namespace Proxies\__CG__;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class InvoiceItems extends \InvoiceItems implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setPrice($price)
    {
        $this->__load();
        return parent::setPrice($price);
    }

    public function getPrice()
    {
        $this->__load();
        return parent::getPrice();
    }

    public function setRentalRate($rentalRate)
    {
        $this->__load();
        return parent::setRentalRate($rentalRate);
    }

    public function getRentalRate()
    {
        $this->__load();
        return parent::getRentalRate();
    }

    public function setDiscount($discount)
    {
        $this->__load();
        return parent::setDiscount($discount);
    }

    public function getDiscount()
    {
        $this->__load();
        return parent::getDiscount();
    }

    public function setQuantity($quantity)
    {
        $this->__load();
        return parent::setQuantity($quantity);
    }

    public function getQuantity()
    {
        $this->__load();
        return parent::getQuantity();
    }

    public function setTaxExempt($taxExempt)
    {
        $this->__load();
        return parent::setTaxExempt($taxExempt);
    }

    public function getTaxExempt()
    {
        $this->__load();
        return parent::getTaxExempt();
    }

    public function setDateOut($dateOut)
    {
        $this->__load();
        return parent::setDateOut($dateOut);
    }

    public function getDateOut()
    {
        $this->__load();
        return parent::getDateOut();
    }

    public function setDateDue($dateDue)
    {
        $this->__load();
        return parent::setDateDue($dateDue);
    }

    public function getDateDue()
    {
        $this->__load();
        return parent::getDateDue();
    }

    public function setDateReturned($dateReturned)
    {
        $this->__load();
        return parent::setDateReturned($dateReturned);
    }

    public function getDateReturned()
    {
        $this->__load();
        return parent::getDateReturned();
    }

    public function setDaysCharged($daysCharged)
    {
        $this->__load();
        return parent::setDaysCharged($daysCharged);
    }

    public function getDaysCharged()
    {
        $this->__load();
        return parent::getDaysCharged();
    }

    public function setInvoice(\Invoices $invoice)
    {
        $this->__load();
        return parent::setInvoice($invoice);
    }

    public function getInvoice()
    {
        $this->__load();
        return parent::getInvoice();
    }

    public function setInventory(\Inventory $inventory)
    {
        $this->__load();
        return parent::setInventory($inventory);
    }

    public function getInventory()
    {
        $this->__load();
        return parent::getInventory();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'price', 'rentalRate', 'discount', 'quantity', 'taxExempt', 'dateOut', 'dateDue', 'dateReturned', 'daysCharged', 'invoice', 'inventory');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}