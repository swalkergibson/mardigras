<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Clerks extends \Entities\Clerks implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setCode($code)
    {
        $this->__load();
        return parent::setCode($code);
    }

    public function getCode()
    {
        $this->__load();
        return parent::getCode();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setPasswordHash($passwordHash)
    {
        $this->__load();
        return parent::setPasswordHash($passwordHash);
    }

    public function getPasswordHash()
    {
        $this->__load();
        return parent::getPasswordHash();
    }

    public function setPasswordSalt($passwordSalt)
    {
        $this->__load();
        return parent::setPasswordSalt($passwordSalt);
    }

    public function getPasswordSalt()
    {
        $this->__load();
        return parent::getPasswordSalt();
    }

    public function setDateCreated($dateCreated)
    {
        $this->__load();
        return parent::setDateCreated($dateCreated);
    }

    public function getDateCreated()
    {
        $this->__load();
        return parent::getDateCreated();
    }

    public function setDateLastLogin($dateLastLogin)
    {
        $this->__load();
        return parent::setDateLastLogin($dateLastLogin);
    }

    public function getDateLastLogin()
    {
        $this->__load();
        return parent::getDateLastLogin();
    }

    public function setClerkGroup(\Entities\ClerkGroups $clerkGroup)
    {
        $this->__load();
        return parent::setClerkGroup($clerkGroup);
    }

    public function getClerkGroup()
    {
        $this->__load();
        return parent::getClerkGroup();
    }

    public function setOrders(\Entities\Orders $orders)
    {
        $this->__load();
        return parent::setOrders($orders);
    }

    public function getOrders()
    {
        $this->__load();
        return parent::getOrders();
    }

    public function setInvoices(\Entities\Invoices $invoices)
    {
        $this->__load();
        return parent::setInvoices($invoices);
    }

    public function getInvoices()
    {
        $this->__load();
        return parent::getInvoices();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'code', 'name', 'passwordHash', 'passwordSalt', 'dateCreated', 'dateLastLogin', 'clerkGroup', 'orders', 'invoices');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}