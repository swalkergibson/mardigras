<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Orders extends \Entities\Orders implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setOrderDate($orderDate)
    {
        $this->__load();
        return parent::setOrderDate($orderDate);
    }

    public function getOrderDate()
    {
        $this->__load();
        return parent::getOrderDate();
    }

    public function setLastUpdateDate($lastUpdateDate)
    {
        $this->__load();
        return parent::setLastUpdateDate($lastUpdateDate);
    }

    public function getLastUpdateDate()
    {
        $this->__load();
        return parent::getLastUpdateDate();
    }

    public function setOrderKey($orderKey)
    {
        $this->__load();
        return parent::setOrderKey($orderKey);
    }

    public function getOrderKey()
    {
        $this->__load();
        return parent::getOrderKey();
    }

    public function setCancelDate($cancelDate)
    {
        $this->__load();
        return parent::setCancelDate($cancelDate);
    }

    public function getCancelDate()
    {
        $this->__load();
        return parent::getCancelDate();
    }

    public function setShipDate($shipDate)
    {
        $this->__load();
        return parent::setShipDate($shipDate);
    }

    public function getShipDate()
    {
        $this->__load();
        return parent::getShipDate();
    }

    public function setOrderDiscount($orderDiscount)
    {
        $this->__load();
        return parent::setOrderDiscount($orderDiscount);
    }

    public function getOrderDiscount()
    {
        $this->__load();
        return parent::getOrderDiscount();
    }

    public function setPaymentTerms($paymentTerms)
    {
        $this->__load();
        return parent::setPaymentTerms($paymentTerms);
    }

    public function getPaymentTerms()
    {
        $this->__load();
        return parent::getPaymentTerms();
    }

    public function setDeliveryDate($deliveryDate)
    {
        $this->__load();
        return parent::setDeliveryDate($deliveryDate);
    }

    public function getDeliveryDate()
    {
        $this->__load();
        return parent::getDeliveryDate();
    }

    public function setSubmitDate($submitDate)
    {
        $this->__load();
        return parent::setSubmitDate($submitDate);
    }

    public function getSubmitDate()
    {
        $this->__load();
        return parent::getSubmitDate();
    }

    public function setOrderStatus(\Entities\OrderStatus $orderStatus)
    {
        $this->__load();
        return parent::setOrderStatus($orderStatus);
    }

    public function getOrderStatus()
    {
        $this->__load();
        return parent::getOrderStatus();
    }

    public function setOrderSubmitMethod(\Entities\OrderSubmitMethods $orderSubmitMethod = NULL)
    {
        $this->__load();
        return parent::setOrderSubmitMethod($orderSubmitMethod);
    }

    public function getOrderSubmitMethod()
    {
        $this->__load();
        return parent::getOrderSubmitMethod();
    }

    public function setVendor(\Entities\Vendors $vendor)
    {
        $this->__load();
        return parent::setVendor($vendor);
    }

    public function getVendor()
    {
        $this->__load();
        return parent::getVendor();
    }

    public function setClerk(\Entities\Clerks $clerk)
    {
        $this->__load();
        return parent::setClerk($clerk);
    }

    public function getClerk()
    {
        $this->__load();
        return parent::getClerk();
    }

    public function setOrderItems(\Entities\OrderItems $orderItems)
    {
        $this->__load();
        return parent::setOrderItems($orderItems);
    }

    public function getOrderItems()
    {
        $this->__load();
        return parent::getOrderItems();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'orderDate', 'lastUpdateDate', 'orderKey', 'cancelDate', 'shipDate', 'orderDiscount', 'paymentTerms', 'deliveryDate', 'submitDate', 'orderStatus', 'orderSubmitMethod', 'vendor', 'clerk', 'orderItems');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}